from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from main_parser import news_unian, updates_unian
from main_parser import news_rbc, updates_rbc
from main_parser import news_bbc, updates_bbc
from main_parser import get_currency

from botStates import WeatherStates
from botStates import Recommendations

from config import TOKEN, user_id
from config import weather_api
from config import CHANNEL_ID

import markups as kups
from Middlewares.rateLimits import rate_limit
from Middlewares.throttling import ThrottlingMiddleware

from datetime import date
import requests
import logging
import asyncio
import json

logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ –∫–æ–º–º–∞–Ω–¥–µ Start
@dp.message_handler(commands=['start'])
@rate_limit(600)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 10 –º–∏–Ω—É—Ç
async def start_bot(message: types.Message):
    hello_message = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ UkrInfoBot ü§ñ\n\n" \
                    "–¶–µ–π –±–æ—Ç –ø–æ–∫–ª–∏–∫–∞–Ω–∏–π –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—à—É–∫ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω, " \
                    "–≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü—ñ–∫–∞–≤–∏—Ö –¥–ª—è –≤–∞—Å —Ä–µ—Å—É—Ä—Å—ñ–≤ —ñ –∑–∞—Ö–æ–¥—ñ–≤ " \
                    "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∏–º —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º! \n\n" \
                    "–ó —É—Å—ñ—Ö –ø–∏—Ç–∞–Ω—å –≤–∏ –º–æ–∂–µ—Ç–µ " \
                    "–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞ üôã\n\n"

    await message.answer_sticker('CAACAgIAAxkBAAEEbtNiUw6G51T2xm5_p5Y7FLZdvBSyLwACm_0AAmOLRgySbtx7CqRIBSME')
    await message.answer(hello_message, reply_markup=kups.main_keyboard)

    await asyncio.sleep(2)
    await message.answer('–ô–¥–µ –ø–æ—à—É–∫ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω üîé')
    await asyncio.sleep(5)

    # –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –£–Ω–∏–∞–Ω-–∞
    news_unian()

    with open("dicts/newsUnian.json", encoding="utf-8") as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items()):
        news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
               f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
               f"{hlink(v['ulr_title'], v['news_url'])}"

        await message.answer(news)

    await asyncio.sleep(2)
    await message.answer('–£–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω ü§ñ')

    # –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Ö –†–ë–ö
    news_rbc()

    # –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Ö BBC
    news_bbc()


# –í—Ö–æ–¥ –≤–æ –≤—Ç–æ—Ä–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(Text(equals='–Ü–Ω—à—ñ —Ä–µ—Å—É—Ä—Å–∏ ‚§µ'))
async def info_tariff(message: types.Message):
    await message.answer('–£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∑ —ñ–Ω—à–∏—Ö —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ üóì',
                         reply_markup=kups.second_keyboard)


# –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥ ‚¨Ö'))
async def back_to_main_menu(message: types.Message):
    await message.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É üôã', reply_markup=kups.main_keyboard)


# –ü–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã–∑–≤–∞–Ω–Ω—ã–π –∫–Ω–æ–ø–∫–æ–π
@dp.message_handler(Text(equals="–ù–æ–≤–∏–Ω–∏ üîñ"))
@rate_limit(300)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 5 –º–∏–Ω—É—Ç
async def get_freshnews_only(message: types.Message):
    fresh_news = updates_unian()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"{hlink(v['ulr_title'], v['news_url'])}"

            await message.answer(news)
    else:
        await message.answer('–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –Ω–æ–≤–æ–≥–æ ü§ñ')
        await asyncio.sleep(0.5)
        await message.answer('–û—Å—Ç–∞–Ω–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üóÉÔ∏è')
        await asyncio.sleep(1.5)

        with open("dicts/newsUnian.json", encoding="utf-8") as file:
            news_dict = json.load(file)

        for k, v in sorted(news_dict.items())[-2:]:
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"{hlink(v['ulr_title'], v['news_url'])}"

            await message.answer(news)
            await asyncio.sleep(0.2)


# –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
async def news_every_minute():
    while True:
        fresh_news = updates_unian()

        if len(fresh_news) >= 1:
            for k, v in sorted(fresh_news.items()):
                news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
                       f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                       f"{hlink(v['ulr_title'], v['news_url'])}"

                # @userinfobot
                # await bot.send_sticker(user_id, 'CAACAgIAAxkBAAEEl6JibGAsnR5Cpq310Gq1Wu'
                #                                 'VrLntBjQACshQAAgJHKUvbRQzuhBMcuyQE')
                await bot.send_message(user_id, news)
        # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        # else:
        #     await bot.send_message(user_id, "–ü–æ–∫–∏ —â–æ –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î ü§ñ",
        #                            disable_notification=True)

        await asyncio.sleep(90)


# –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã -> –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(Text(equals="–ü–æ–≥–æ–¥–∞ üíß"), state=None)
@rate_limit(4)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 4 —Å–µ–∫—É–Ω–¥—ã
async def search_weather(message: types.Message):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ ü§ñ', reply_markup=types.ReplyKeyboardRemove())

    await WeatherStates.city.set()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ - –≥–æ—Ä–æ–¥
@dp.message_handler(state=WeatherStates.city)
async def answer_city(message: types.Message, state: FSMContext):
    answer = message.text

    try:
        r = requests.get(f'https://api.openweathermap.org/data/2.5/weather?'
                         f'q={answer}&appid={weather_api}&units=metric')
        data = r.json()

        city = data['name']
        temperature = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        temp_max = data['main']['temp_max']
        temp_min = data['main']['temp_min']
        wind_speed = data['wind']['speed']

        await message.answer(f'üîπ<b>–ó–∞—Ä–∞–∑ —É {city} {temperature}</b>‚ÑÉüî∏\n\n'
                             f'üìâ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞<b>:</b> {temp_min}‚ÑÉ\n'
                             f'üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞<b>:</b> {temp_max}‚ÑÉ\n'
                             f'üå§ –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫<b>:</b> {feels_like}‚ÑÉ\n\n'
                             f'üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å<b>:</b> {humidity}\n'
                             f'üå° –¢–∏—Å–∫<b>:</b> {pressure}\n'
                             f'üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É<b>:</b> {wind_speed}', reply_markup=kups.main_keyboard)

        await state.finish()

    except:
        await message.answer('–ú—ñ—Å—Ç–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ ü§ñ', reply_markup=kups.main_keyboard)
        await state.finish()


# –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
@dp.message_handler(Text(equals="–í–∞–ª—é—Ç–∏ üí∞"))
@rate_limit(300)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 5 –º–∏–Ω—É—Ç
async def currency(message: types.Message):
    get_currency()
    with open('dicts/currency_dict.json', encoding="utf-8") as file:
        currency_tg = json.load(file)

    for k, v in currency_tg.items():
        currencys = f"üîπ<b>–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≤–∞–ª—é—Ç: {v['currency_name']} & UAH</b>üî∏\n" \
                    f"<b>–ü–æ–∫—É–ø–∫–∞:</b> {v['currency_buy']}–≥—Ä–Ω\n" \
                    f"<b>–ü—Ä–æ–¥–∞–∂:</b> {v['currency_sale']}–≥—Ä–Ω"

        await message.answer(currencys)

    finance = (f'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑—è—Ç–∞ –∑ –¥–∂–µ—Ä–µ–ª–∞: '
               f'{hlink("finance.ua", "https://finance.ua/banks/privatbank/currency")} üìå')

    await message.answer(finance, disable_web_page_preview=True)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –†–ë–ö
@dp.message_handler(Text(equals='RBCüóû'))
@rate_limit(60)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 60 —Å–µ–∫—É–Ω–¥
async def get_rbc_news(message: types.Message):
    fresh_news = updates_rbc()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items())[-10:]:
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {date.today()} {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑—è—Ç–∞ –∑ –¥–∂–µ—Ä–µ–ª–∞: {hlink('rbc.ua', v['news_link'])} üìå"
            await message.answer(news)
    else:
        await message.answer('–û—Å—Ç–∞–Ω–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üóÉÔ∏è')
        await asyncio.sleep(1.5)

        with open('dicts/newsRbc.json', encoding="utf-8") as file:
            rbcNews_dict = json.load(file)

        for k, v in sorted(rbcNews_dict.items())[-2:]:
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {date.today()} {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑—è—Ç–∞ –∑ –¥–∂–µ—Ä–µ–ª–∞: {hlink('rbc.ua', v['news_link'])} üìå"
            await message.answer(news)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ BBC
@dp.message_handler(Text(equals='BBCüóû'))
@rate_limit(60)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 60 —Å–µ–∫—É–Ω–¥
async def get_bbc_news(message: types.Message):
    fresh_news = updates_bbc()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items())[-5:]:
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑—è—Ç–∞ –∑ –¥–∂–µ—Ä–µ–ª–∞: {hlink('bbc.com', v['news_url'])} üìå"
            await message.answer(news)
    else:
        await message.answer('–û—Å—Ç–∞–Ω–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üóÉÔ∏è')
        await asyncio.sleep(1.5)

        with open('dicts/newsBBC.json', encoding="utf-8") as file:
            newsBBC = json.load(file)

        for k, v in sorted(newsBBC.items())[-2:]:
            news = f"<b>üîπ–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {v['news_time']}</b>\n" \
                   f"üî∏<b>–¢–µ–º–∞</b>: {v['news_title']}\n\n" \
                   f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑—è—Ç–∞ –∑ –¥–∂–µ—Ä–µ–ª–∞: {hlink('bbc.ua', v['news_url'])} üìå"
            await message.answer(news)


# –ö–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['recommendation'])
@rate_limit(10)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 10 —Å–µ–∫—É–Ω–¥
async def write_recommendation(message: types.Message):
    await message.answer("–î—è–∫—É—é –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫!\n–¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–±–∏—Ç–∏ –±–æ—Ç–∞ –∫—Ä–∞—â–∏–º üíõ\n\n"
                         "‚†Ä‚Ä¢ –ë–æ—Ç –ø—Ä–∏–π–º–∞—î –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. "
                         "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç—Ä–∏–º–∞–π—Ç–µ—Å—è –≤—ñ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–π–≤–æ—ó "
                         "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (—Å—Ç—ñ–∫–µ—Ä—ñ–≤, –≥—ñ—Ñ, —Ñ–æ—Ç–æ —Ç–∞ –∞—É–¥—ñ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)‚ùó\n\n"
                         "‚†Ä‚Ä¢ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ üõ° "
                         "–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫, "
                         "–Ω–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –∑–∞ "
                         "—è–∫–∏–º–∏ –∑ –≤–∞–º–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è üôè\n\n"
                         "‚†Ä‚Ä¢ –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É –≤–∏ "
                         "–∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏, "
                         "–≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –π–æ–≥–æ —á–∏ –Ω—ñ ‚òë", reply_markup=types.ReplyKeyboardRemove())

    await Recommendations.recommendation.set()


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['help'])
@rate_limit(10)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 10 —Å–µ–∫—É–Ω–¥
async def write_help(message: types.Message):
    await message.answer("–ü—ñ–¥–∫–∞–∂—ñ—Ç—å, —è–∫–∞ —Å–∞–º–µ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? ü§ñ\n\n"
                         "‚†Ä‚Ä¢ –ë–æ—Ç –ø—Ä–∏–π–º–∞—î –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. "
                         "–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç—Ä–∏–º–∞–π—Ç–µ—Å—è –≤—ñ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–π–≤–æ—ó "
                         "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (—Å—Ç—ñ–∫–µ—Ä—ñ–≤, –≥—ñ—Ñ, —Ñ–æ—Ç–æ —Ç–∞ –∞—É–¥—ñ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)‚ùó\n\n"
                         "‚†Ä‚Ä¢ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ üõ° "
                         "–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫, "
                         "–Ω–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –∑–∞ "
                         "—è–∫–∏–º–∏ –∑ –≤–∞–º–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è üôè\n\n"
                         "‚†Ä‚Ä¢ –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É –≤–∏ –∑–º–æ–∂–µ—Ç–µ "
                         "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ "
                         "–π–æ–≥–æ —á–∏ –Ω—ñ ‚òë", reply_markup=types.ReplyKeyboardRemove())

    await Recommendations.help.set()


# –£—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–π
@dp.message_handler(state=Recommendations.recommendation)
async def accept_recommendation(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(answer_recommendation=answer)
    await message.answer(f'üíô <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> üíõ\n\n[+] {answer}',
                         reply_markup=kups.okno_keyboard)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ—É—é—â–µ–º—É —ç—Ç–∞–ø—É –º–∞—à–∏–Ω—ã- —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await Recommendations.accept.set()


# –£—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–º–æ—â–∏
@dp.message_handler(state=Recommendations.help)
async def accept_recommendation(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(answer_recommendation=answer)
    await message.answer(f'üíô <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b> üíõ\n\n[+] {answer}',
                         reply_markup=kups.okno_keyboard)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ—É—é—â–µ–º—É —ç—Ç–∞–ø—É –º–∞—à–∏–Ω—ã- —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await Recommendations.accept.set()


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(state=Recommendations.accept)
async def send_recommendation(message: types.Message, state: FSMContext):
    answer_2 = message.text

    if answer_2 == '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚úÖ':
        data = await state.get_data()
        rec = data.get('answer_recommendation')

        await bot.send_message(CHANNEL_ID, rec)
        await message.answer('–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ')
        await asyncio.sleep(0.5)
        await state.finish()
    elif answer_2 == '–°–∫–∞—Å—É–≤–∞—Ç–∏ üö´':
        await state.finish()
    else:
        await message.answer('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ñ')
        await state.finish()

    await message.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É üôã',
                         reply_markup=kups.main_keyboard)


# –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è / –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler()
@rate_limit(5)  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ 5 —Å–µ–∫—É–Ω–¥
async def news_tracker(message: types.Message):
    await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–∞—Ä–∞–∑—ñ –±–æ—Ç –Ω–µ –≤–º—ñ—î "
                         "—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ü§ñ")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(news_every_minute())

    # –ó–∞–ø—É—Å–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    dp.middleware.setup(ThrottlingMiddleware())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp)
